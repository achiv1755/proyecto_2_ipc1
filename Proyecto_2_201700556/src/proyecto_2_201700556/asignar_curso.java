/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_2_201700556;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import proyecto_2_201700556.dinamico.Login;
public class asignar_curso extends Estudiante{
    
   
    DefaultTableModel tabla_1;
       String carnet_2="";
        int contador_pre=0;
    
    public asignar_curso() {
 
        initComponents();
        setResizable(false);
        setBounds(80, 80, 1200, 600);
        setResizable(false);
          /// carnetlab.setText();
    String data[][] = new String[0][8];
    String tituloo[] = {"Codigo", "Curso", "Catedratico", "Credito", "Lab", "Seccion", "Pre-requisito", "Pos-requitito"};
    tabla_1=new DefaultTableModel(data, tituloo)
            
          {
            @Override
            public boolean isCellEditable(int filas, int columna) {
                if (columna >= 0) {
                    return false;
                }
                return super.isCellEditable(filas, columna);
            }
        };
       
 
    this.tabla.setModel(tabla_1);
    }

    public String getCarnet_2() {
        return carnet_2;
    }

    public void setCarnet_2(String carnet_2) {
        this.carnet_2 = carnet_2;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        boton_asignar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        combo_year = new javax.swing.JComboBox<>();
        combo_curso = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        text_desasignar = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        log_out = new javax.swing.JButton();
        regresar = new javax.swing.JButton();
        combo_semestre = new javax.swing.JComboBox<>();
        carnetlab = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ASIGNAR CURSO");
        setLocation(new java.awt.Point(200, 50));
        setResizable(false);

        panel1.setToolTipText("");
        panel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        titulo.setText("ASIGNAR CURSOS");

        boton_asignar.setBackground(new java.awt.Color(255, 255, 255));
        boton_asignar.setForeground(new java.awt.Color(51, 51, 51));
        boton_asignar.setText("ASIGNAR");
        boton_asignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_asignarActionPerformed(evt);
            }
        });

        jLabel1.setText("SEMESTRE");

        jLabel2.setText("AÃ‘O");

        jLabel3.setText("CURSO");

        combo_year.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        combo_year.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_yearItemStateChanged(evt);
            }
        });
        combo_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_yearActionPerformed(evt);
            }
        });

        combo_curso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        combo_curso.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_cursoItemStateChanged(evt);
            }
        });
        combo_curso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_cursoActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Curso", "Catedratico", "Credito", "LAB", "Seccion", "Pre-Requisito", "Pos-Requisito"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabla.setCellSelectionEnabled(true);
        tabla.setEditingRow(0);
        jScrollPane1.setViewportView(tabla);
        tabla.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton1.setText("DESASIGNAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        text_desasignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_desasignarActionPerformed(evt);
            }
        });

        jLabel4.setText("codigo");

        log_out.setText("LOG OUT");
        log_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_outActionPerformed(evt);
            }
        });

        regresar.setText("REGRESAR");
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });

        combo_semestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Primer Semestre", "Segundo Semestre" }));
        combo_semestre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_semestreItemStateChanged(evt);
            }
        });
        combo_semestre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                combo_semestreFocusLost(evt);
            }
        });
        combo_semestre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_semestreActionPerformed(evt);
            }
        });

        carnetlab.setText(" ");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(503, 503, 503)
                        .addComponent(titulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(carnetlab, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111)))
                .addComponent(log_out)
                .addGap(22, 22, 22))
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(jLabel3))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(combo_semestre, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_curso, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton_asignar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addComponent(regresar)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(255, 255, 255))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(text_desasignar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(110, 110, 110))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(carnetlab))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(log_out)))
                .addGap(18, 18, 18)
                .addComponent(regresar)
                .addGap(10, 10, 10)
                .addComponent(titulo)
                .addGap(18, 18, 18)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_semestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_curso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boton_asignar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_desasignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        for (int i = 17; i < 26; i++) {

            combo_year.addItem("20" + i);
        }
        Archivo Archivo=new Archivo();

        if (!Archivo.curso_vacio()) {
            Curso aux = Archivo.curso_primero;
            do {
                combo_curso.addItem(aux.getNombre());
                aux = aux.siguiente;
            } while (Archivo.curso_primero != aux);
        }
        solo_numero(text_desasignar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boton_asignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_asignarActionPerformed

        
        if (combo_semestre.getSelectedItem().equals("") || combo_year.getSelectedItem().equals("") || combo_curso.getSelectedItem().equals("")) {
                   JOptionPane.showMessageDialog(null, "Llene todos los campos");
                }else if (contador_cursos == 3) {
                JOptionPane.showMessageDialog(null, "Limite de cursos asignados", "ALERTA", JOptionPane.WARNING_MESSAGE);
               } else {// se busca si el semestre existe o si es nulo
                   Semestre aux_de_semestre = buscar_semestre(year_curso, semestre_curso);

                   if (aux_de_semestre == null) {

                      //se crea el semestre
                      
                         aux_estudiante=recorer_estudiante();
                        
                
                        agregar_semestre(new Semestre(semestre_curso, year_curso)); }

                   
                   
                    Semestre aux_de_semestre2 = buscar_semestre(year_curso, semestre_curso);
                    if (aux_de_semestre2 != null) {
                        semestre_buscado = buscar_semestre(year_curso, semestre_curso);
                        //se crea un curso;

                        Curso aux_curso_encontrado = buscar_curso(Curso_curso);

                        
                        //aca se agrega el mamon 
                        recorer_estudiantes();
                        if (  !recorer_estudiantes() ) 
                        {
                            if (recorer_semestre_1(aux_estudiante,Curso_curso)) {
                                JOptionPane.showMessageDialog(null, "Ya Aprobo este curso", "ALERTA", JOptionPane.WARNING_MESSAGE);
                            }else{
                            if (recorer_estudiantes_precredito(aux_curso_encontrado)) 
                            {
                                //calidar aca
                                aux_de_semestre2.curso_agregar_final(aux_curso_encontrado);
                            }else{JOptionPane.showMessageDialog(null, "le faltan pre requisitos", "ALERTA", JOptionPane.WARNING_MESSAGE);}}
                        
                        //aca se deve validar los pre creditos gg
                        }else{JOptionPane.showMessageDialog(null, "ya se asigno a este curso", "ALERTA", JOptionPane.WARNING_MESSAGE);}
                        //contador_cursos++;
                        // aux_de_semestre.setCantidad_de_cursos(contador_cursos);

                    }
                    Semestre aux_de_sumar_cursos = buscar_semestre(year_curso, semestre_curso);
                    if (aux_de_sumar_cursos == aux_estudiante.primer_semestre) {

                        contador_cursos = aux_estudiante.primer_semestre.curso_tamano;
                           mostrar_tabla20();
                        tabla.repaint();
                       
                    } else {

                        contador_cursos = aux_de_sumar_cursos.curso_tamano;
                           mostrar_tabla20();
                        tabla.repaint();

                    }
                  
               

                }

            
        
        
        
    }//GEN-LAST:event_boton_asignarActionPerformed

    private void text_desasignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_desasignarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_desasignarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{
           
        if (contador_cursos!=0) {
            
       
        Curso aux_curso=semestre_buscado.primer_curso;
  boolean validacion=false;
  int codigo_curso=buscar_codigo_curso(Integer.valueOf(text_desasignar.getText())).getCodigo();
  
        if (text_desasignar.getText().equals("")) 
        {
              JOptionPane.showMessageDialog(null, "llene el campo", "ALERTA", JOptionPane.WARNING_MESSAGE);
        }else{
            if (semestre_buscado.primer_curso.getCodigo()==codigo_curso&&semestre_buscado.primer_curso==semestre_buscado.ultimo_curso)
            {
                semestre_buscado.primer_curso=null;
                semestre_buscado.ultimo_curso=null;
               
                semestre_buscado.curso_tamano--;
                contador_cursos=semestre_buscado.curso_tamano; 
                mostrar_tabla20();
                
            }
            else if (semestre_buscado.primer_curso.getCodigo()==codigo_curso)
            {
                semestre_buscado.primer_curso=semestre_buscado.primer_curso.siguiente;
                semestre_buscado.curso_tamano--;
                contador_cursos=semestre_buscado.curso_tamano;
                semestre_buscado.ultimo_curso.enlazarsiguiente(semestre_buscado.primer_curso);
                mostrar_tabla20();
                
            }
          else
            {
             do
             {
                 if (aux_curso.siguiente.getCodigo()==codigo_curso) {
                     validacion=true;
                       
                     break;
                 }
                 
                 
                  aux_curso=aux_curso.siguiente;
             }while(aux_curso!=semestre_buscado.primer_curso&&semestre_buscado.primer_curso!=semestre_buscado.ultimo_curso);
        
                if (validacion) 
                {
                    
              
               aux_curso.siguiente=aux_curso.siguiente.siguiente;
               semestre_buscado.curso_tamano--;
                contador_cursos=semestre_buscado.curso_tamano;
                              mostrar_tabla20();
                               
                    if (aux_curso.siguiente!=null) {
                        semestre_buscado.ultimo_curso=aux_curso;
                        
                    }
                }else{ JOptionPane.showMessageDialog(null, "no hay curso", "ALERTA", JOptionPane.WARNING_MESSAGE);}
             
             
             
            }
            
            
        
        
        
        }}else{ JOptionPane.showMessageDialog(null, "no tiene curso asignado", "ALERTA", JOptionPane.WARNING_MESSAGE);}
       }catch (Exception e){
           JOptionPane.showMessageDialog(null, "no tiene curso asignado", "ALERTA", JOptionPane.WARNING_MESSAGE);
                   }
       
      text_desasignar.setText("");
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void combo_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_yearActionPerformed
   
    }//GEN-LAST:event_combo_yearActionPerformed

    private void combo_cursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_cursoActionPerformed
    
    }//GEN-LAST:event_combo_cursoActionPerformed

    private void log_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_outActionPerformed

          setVisible(false);
            Login login = new Login();
            login.buscar();
   
        // TODO add your handling code here:
    }//GEN-LAST:event_log_outActionPerformed

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
 setVisible(false);
Estudiante e=new Estudiante();
e.pagina_principal();
        
    }//GEN-LAST:event_regresarActionPerformed

    private void combo_semestreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_semestreActionPerformed
      
        
        
    }//GEN-LAST:event_combo_semestreActionPerformed

    private void combo_semestreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_semestreItemStateChanged

        String semestre_aux=semestre_curso;
       
              semestre_curso = (String) combo_semestre.getSelectedItem();
         
         if ("".equals((String) combo_semestre.getSelectedItem()))
        {
                 contador_cursos=0;
             String data[][] = new String[0][8];
    String tituloo[] = {"Codigo", "Curso", "Catedratico", "Credito", "Lab", "Seccion", "Pre-requisito", "Pos-requitito"};
    tabla_1=new DefaultTableModel(data, tituloo)
                 
          {
            @Override
            public boolean isCellEditable(int filas, int columna) {
                if (columna >= 0) {
                    return false;
                }
                return super.isCellEditable(filas, columna);
            }
        };this.tabla.setModel(tabla_1);
        }
        
        
        if (!"".equals((String) combo_semestre.getSelectedItem())&&!"".equals((String) combo_year.getSelectedItem())) {
            //si  hay semestre 
        
        if (!semestre_curso.equals((String) combo_semestre.getSelectedItem())) {
                   
    
                }

                semestre_curso = (String) combo_semestre.getSelectedItem();
                
                
                if (!semestre_aux.equals(semestre_curso) ) 
                {
                      Semestre semestre2 = buscar_semestre(year_curso, semestre_curso);
                         if (semestre2!=semestre_buscado) {
                               semestre_buscado=semestre2;
                               
                                  if (semestre_buscado != null) {

                        Semestre aux_de_sumar_cursos = buscar_semestre(year_curso, semestre_curso);
                        if (aux_de_sumar_cursos == primer_semestre) {
                            
                            contador_cursos = primer_semestre.curso_tamano;
                               mostrar_tabla20();
                        }

                        if (aux_de_sumar_cursos != primer_semestre) {

                            contador_cursos = aux_de_sumar_cursos.curso_tamano;
                               mostrar_tabla20();

                        }

                    }
    }
                         
                
                }}
                if (semestre_buscado==null) 
                {
                    contador_cursos=0;
             String data[][] = new String[0][8];
    String tituloo[] = {"Codigo", "Curso", "Catedratico", "Credito", "Lab", "Seccion", "Pre-requisito", "Pos-requitito"};
    tabla_1=new DefaultTableModel(data, tituloo)
                 
          {
            @Override
            public boolean isCellEditable(int filas, int columna) {
                if (columna >= 0) {
                    return false;
                }
                return super.isCellEditable(filas, columna);
            }
        };
    this.tabla.setModel(tabla_1);
        }
                
                
            
         
                 
            
        
                
                  
                
        
        
        
    }//GEN-LAST:event_combo_semestreItemStateChanged

    private void combo_yearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_yearItemStateChanged
    String semestre_aux=year_curso;
       
         year_curso = (String) combo_year.getSelectedItem();
        if ("".equals((String) combo_year.getSelectedItem()))
        {
                 contador_cursos=0;
             String data[][] = new String[0][8];
    String tituloo[] = {"Codigo", "Curso", "Catedratico", "Credito", "Lab", "Seccion", "Pre-requisito", "Pos-requitito"};
    tabla_1=new DefaultTableModel(data, tituloo)      
          {
            @Override
            public boolean isCellEditable(int filas, int columna) {
                if (columna >= 0) {
                    return false;
                }
                return super.isCellEditable(filas, columna);
            }
        };   this.tabla.setModel(tabla_1);
        }
          if (!"".equals((String) combo_semestre.getSelectedItem())&&!"".equals((String) combo_year.getSelectedItem())) {
        if (!year_curso.equals((String) combo_year.getSelectedItem())) {
           
                }
                year_curso = (String) combo_year.getSelectedItem();
                combo_year.setFocusable(true);
                 if (!semestre_aux.equals(semestre_curso)) 
                {
                      Semestre semestre2 = buscar_semestre(year_curso, semestre_curso);
                         if (semestre2!=semestre_buscado) {
                               semestre_buscado=semestre2;
                               
                                  if (semestre_buscado != null) {

                        Semestre aux_de_sumar_cursos = buscar_semestre(year_curso, semestre_curso);
                        if (aux_de_sumar_cursos == primer_semestre) {
                            
                            contador_cursos = primer_semestre.curso_tamano;
                               mostrar_tabla20();
                        }

                        if (aux_de_sumar_cursos != primer_semestre) {

                            contador_cursos = aux_de_sumar_cursos.curso_tamano;
                               mostrar_tabla20();

                        }

                    }
     
        }

                
                
        
                
                
                }}
                        if (semestre_buscado==null) 
                {
                          contador_cursos=0;
             String data[][] = new String[0][8];
    String tituloo[] = {"Codigo", "Curso", "Catedratico", "Credito", "Lab", "Seccion", "Pre-requisito", "Pos-requitito"};
    tabla_1=new DefaultTableModel(data, tituloo)     
          {
            @Override
            public boolean isCellEditable(int filas, int columna) {
                if (columna >= 0) {
                    return false;
                }
                return super.isCellEditable(filas, columna);
            }
        };   this.tabla.setModel(tabla_1);
        }
                
    }//GEN-LAST:event_combo_yearItemStateChanged

    private void combo_cursoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_cursoItemStateChanged
      
        Curso_curso = (String) combo_curso.getSelectedItem();
                combo_curso.setFocusable(true);
    }//GEN-LAST:event_combo_cursoItemStateChanged

    private void combo_semestreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_combo_semestreFocusLost
     
    }//GEN-LAST:event_combo_semestreFocusLost

   
    public  void m(String carnet ) {
       carnet_2=carnet;
        
       
         
        
     
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(asignar_curso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(asignar_curso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(asignar_curso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(asignar_curso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new asignar_curso().setVisible(true);
            }
        });
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_asignar;
    private javax.swing.JLabel carnetlab;
    private javax.swing.JComboBox<String> combo_curso;
    private javax.swing.JComboBox<String> combo_semestre;
    private javax.swing.JComboBox<String> combo_year;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton log_out;
    private javax.swing.JPanel panel1;
    private javax.swing.JButton regresar;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField text_desasignar;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
 Estudiante aux_estudiante;
 Semestre aux_semestre;
 Curso aux_curso;
 
    private Semestre buscar_semestre(String year_curso, String semestre_curso) {
        if (Semestre_vacio()) {
            return null;
        } else {
            Semestre aux = recorer_estudiante().primer_semestre;
            do {
                if (aux.getSemestre().equals(semestre_curso) && aux.getYear().equals(year_curso)) {
                   
                    aux_semestre=aux;
                    return aux;
                }
                aux = aux.siguiente_semestre;
            } while (aux !=  recorer_estudiante().primer_semestre &&  recorer_estudiante().primer_semestre !=  recorer_estudiante().ultimo_semestre);

        }
        return null;

    }
 private Estudiante recorer_estudiante()
         
 {   
    
     Estudiante aux=Archivo.estudiante_primero;
     do { 
         
         if (aux.getCarnet().equalsIgnoreCase(nombre_del_usuario))
         {    
              aux_estudiante=aux;
             return aux;
         }
         
         
         
         
         aux=aux.siguiente;
     } while (aux!=Archivo.estudiante_primero&&Archivo.estudiante_primero!=Archivo.estudiante_ultimo);
      return null;
 
 }
    private void agregar_semestre(Semestre nuevo) {
        
      
        // Consulta si la lista esta vacia.
        if (Semestre_vacio()) {
            
            aux_estudiante.primer_semestre = nuevo;
             aux_estudiante.ultimo_semestre = nuevo;
         aux_estudiante.ultimo_semestre.enlazar_siguiente_semestre(primer_semestre);

        } else {
           aux_estudiante.ultimo_semestre.enlazar_siguiente_semestre(nuevo);
            nuevo.enlazar_siguiente_semestre( aux_estudiante.primer_semestre);
             aux_estudiante.ultimo_semestre = nuevo;

        }
        semestre_buscado = nuevo;
        semestre_tamano++;
    }
      private Curso buscar_curso(String dato_a_buscar) {//curso que voy a agregar 
        Curso aux = Archivo.curso_primero;
        do {
            if (dato_a_buscar.equalsIgnoreCase(aux.getNombre())) {
                Curso a = new Curso(aux.getCodigo(), aux.getNombre(), aux.getCatedratico(), aux.getCredito(), aux.isLaboratorio(), aux.getSeccion(), aux.getPre_credito(), aux.getPos_credito());

                return a;

            }

            aux = aux.siguiente;
        } while (aux != Archivo.curso_primero && Archivo.curso_primero != Archivo.curso_ultimo);
        return null;
    }
      private Curso buscar_codigo_curso(int dato_a_buscar)
      {
          Curso aux = Archivo.curso_primero;
        do {
            if (dato_a_buscar==aux.getCodigo()) {
                Curso a = new Curso(aux.getCodigo(), aux.getNombre(), aux.getCatedratico(), aux.getCredito(), aux.isLaboratorio(), aux.getSeccion(), aux.getPre_credito(), aux.getPos_credito());

                return a;

            }

            aux = aux.siguiente;
        } while (aux != Archivo.curso_primero && Archivo.curso_primero != Archivo.curso_ultimo);
        return null;
      }
     private void mostrar_tabla20()
     {          
              Semestre aux_del_semestre = buscar_semestre(year_curso, semestre_curso);

        int contador_de_cursos = 0;
    String data[][] = new String[contador_cursos][8];
    if (aux_del_semestre == null) {

        } else {
            if (aux_del_semestre.curso_vacio()) {

            } else {
                Curso aux_de_cursos = aux_del_semestre.primer_curso;
                do {

                    //agregar todos los valores a la tabla 
                    data[contador_de_cursos][0] = "" + aux_de_cursos.getCodigo();
                    data[contador_de_cursos][1] = aux_de_cursos.getNombre();
                    data[contador_de_cursos][2] = aux_de_cursos.getCatedratico();
                    data[contador_de_cursos][3] = "" + aux_de_cursos.getCredito();

                    if (aux_de_cursos.isLaboratorio()) {
                        data[contador_de_cursos][4] = "si";
                    } else {
                        data[contador_de_cursos][4] = "no";
                    }

                    data[contador_de_cursos][5] = aux_de_cursos.getSeccion();
                    data[contador_de_cursos][6] = aux_de_cursos.getPre_credito();
                    data[contador_de_cursos][7] = aux_de_cursos.getPos_credito();

                    contador_de_cursos++;
                    aux_de_cursos = aux_de_cursos.siguiente;
                } while (aux_de_cursos != aux_del_semestre.primer_curso && aux_del_semestre.primer_curso != aux_del_semestre.ultimo_curso);

            }
        }
    String tituloo[] = {"Codigo", "Curso", "Catedratico", "Credito", "Lab", "Seccion", "Pre-requisito", "Pos-requitito"};
    tabla_1=new DefaultTableModel(data, tituloo)      
          {
            @Override
            public boolean isCellEditable(int filas, int columna) {
                if (columna >= 0) {
                    return false;
                }
                return super.isCellEditable(filas, columna);
            }
        };

    this.tabla.setModel(tabla_1);
     
     } 
         public void solo_numero(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (Character.isLetter(c)) {
                    JOptionPane.showMessageDialog(null, "No Se Permiten letras", "ALERTA", JOptionPane.WARNING_MESSAGE);
                    e.consume();

                }
            }

        });

    }
      public boolean Semestre_vacio() {
        if (recorer_estudiante().primer_semestre == null) {
            return true;
        } else {
            return false;
        }

    }
      
      
private boolean recorer_estudiantes()
{
Estudiante aux_estudiante=Archivo.estudiante_primero;
    if (aux_estudiante==null)
    {
         return false;
      //  tabla_vacia();
    }else
    {
        //recorer cada estudiante
        do {
            
            //recorrer cada semestre 
            if (aux_estudiante.getCarnet().equals(nombre_del_usuario)) {
                
                if ( recorer_semestre(aux_estudiante)) 
                {
                    return true;
                }
            }
             
            aux_estudiante=aux_estudiante.siguiente;
        } while (aux_estudiante!=Archivo.estudiante_primero&&Archivo.estudiante_primero!=Archivo.estudiante_ultimo);
        
    
    
    
    }return  false;
    


}
private boolean recorer_semestre(Estudiante estudiante_actual)
{
  Semestre aux_semestre=estudiante_actual.primer_semestre;
    if (aux_semestre==null)
    {
       return false; //tabla_vacia();
    }else
    {
    //recorer cada semestre
        do {
            if (aux_semestre.getSemestre().equalsIgnoreCase(semestre_curso)&&aux_semestre.getYear().equalsIgnoreCase(year_curso))
            {
                //si se encontro el semestre que se busca     
                // recorer cada curso
                if (recorer_curso(aux_semestre,estudiante_actual) )
                {
                    return true;
                }
 
                 
                
            }
            aux_semestre=aux_semestre.siguiente_semestre;
        } while (aux_semestre!=estudiante_actual.primer_semestre&&estudiante_actual.primer_semestre!=estudiante_actual.ultimo_semestre);
        
    
    } return false;



}
private boolean recorer_curso(Semestre semestre_actual,Estudiante estudiante_actual)
{
Curso aux_curso=semestre_actual.primer_curso;
Estudiante aux_estudiante=estudiante_actual;
    if (aux_curso==null) 
    {return false;}else
    {
    //recorer todos los cursos 
        do {
           
            
            if (aux_curso.getNombre().equalsIgnoreCase(Curso_curso)) 
            {
                
                return true;
            }
            
            aux_curso=aux_curso.siguiente;
        } while (aux_curso!=semestre_actual.primer_curso&&semestre_actual.primer_curso!=semestre_actual.ultimo_curso);
        
    
    }return false;
    
    
}








      private boolean recorer_estudiantes_precredito(Curso curso)
{
Estudiante aux_estudiante=Archivo.estudiante_primero;
    if (aux_estudiante==null)
    {
         return false;
      //  tabla_vacia();
    }else
    {
        //recorer cada estudiante
        do {
            
            //recorrer cada semestre 
            if (aux_estudiante.getCarnet().equals(nombre_del_usuario)) {
                
                if ( recorer_semestre_precredito(aux_estudiante,curso)) 
                {
                    return true;
                }
            }
             
            aux_estudiante=aux_estudiante.siguiente;
        } while (aux_estudiante!=Archivo.estudiante_primero&&Archivo.estudiante_primero!=Archivo.estudiante_ultimo);
        
    
    
    
    }return  false;
    


}
      private boolean recorer_semestre_precredito(Estudiante estudiante_actual,Curso curso)
{
    
    
    String precredito=curso.getPre_credito();
     if (precredito.equals(" "))
     {
     return true;   
    }
    String data[]=precredito.split("\\,");
          contador_pre=0;
         
         //System.out.println(data.length);
    for (int i = 0; i < data.length; i++)
    {
        
        
        
        
    
    
  Semestre aux_semestre=estudiante_actual.primer_semestre;
  
    if (aux_semestre==null)
    {
       return false; //tabla_vacia();
    }else
    {
    //recorer cada semestre
        do {
            
                  
                // recorer cada curso
                if (recorer_curso_pre(aux_semestre,data[i]) )
                {
                  contador_pre++;
                }
 
                 
                
           
            aux_semestre=aux_semestre.siguiente_semestre;
        } while (aux_semestre!=estudiante_actual.primer_semestre&&estudiante_actual.primer_semestre!=estudiante_actual.ultimo_semestre);
        
    
    } 
    
    //quiero que aca salga true
    
    
    }
     
    if (contador_pre==data.length)
    {
    return true;
    }
    return false;



}
      private boolean recorer_curso_pre(Semestre semestre,String pre_curso)
      {
          Curso aux=semestre.primer_curso;
          if (aux ==null)
          {
           return false;
          }else
          {
          
              do {
                
                  if (pre_curso.equals(""+aux.getCodigo())) 
                  {
                      
                      if (aux.isEstado()) 
                      {
                           
                                return true; 
                      }
                      
            
                  }
                  
                  aux=aux.siguiente;
              } while (aux!=semestre.primer_curso&&semestre.primer_curso!=semestre.ultimo_curso);
              
          
          
          }
          
          
          
          
          return false;
      }
      
private boolean recorer_semestre_1(Estudiante estudiante_actual,String curso)
{

  Semestre aux_semestre=estudiante_actual.primer_semestre;
  
    if (aux_semestre==null)
    {
       return false; //tabla_vacia();
    }else
    {
    //recorer cada semestre
        do {
            
                  
                // recorer cada curso
                if (recorer_curso3(aux_semestre,curso) )
                {
                 return true;
                }
 
                 
                
           
            aux_semestre=aux_semestre.siguiente_semestre;
        } while (aux_semestre!=estudiante_actual.primer_semestre&&estudiante_actual.primer_semestre!=estudiante_actual.ultimo_semestre);
        
    
    } 
    
    //quiero que aca salga true
    
    
return false;
    }
 

      private boolean recorer_curso3(Semestre semestre,String curso)
      {
          Curso aux=semestre.primer_curso;
          if (aux ==null)
          {
           return false;
          }else
          {
          
              do {
                
                  if (curso.equals(""+aux.getNombre())) 
                  {
                      
                      if (aux.isEstado()) 
                      {
                           
                                return true; 
                      }
                      
            
                  }
                  
                  aux=aux.siguiente;
              } while (aux!=semestre.primer_curso&&semestre.primer_curso!=semestre.ultimo_curso);
              
          
          
          }
          
          
          
          
          return false;
      }

      
      
      
      
      
}
